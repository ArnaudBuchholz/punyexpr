!function(e){"use strict";var n="string";const t="symbol";const r={};const c={},u=[n,n,"number","boolean","identifier",t,r,c],s=new RegExp([/'((?:[^'\\]|\\.)*)'/,/"((?:[^"\\]|\\.)*)"/,/((?:\d+(?:\.\d*)?|\.\d+))/,/(true|false)/,/([a-zA-Z_][a-zA-Z_0-9]*)/,/(\+|-|\*|\/|\[|\]|\.)/,/(\s)/,/(.)/].map(e=>{e=e.toString();return e.substring(1,e.length-1)}).join("|"),"g"),d=[e=>e.replace(/\\'/g,"'"),e=>e.replace(/\\"/g,'"'),e=>parseFloat(e),e=>"true"===e];class p extends Error{constructor(e){super("Invalid token @"+e),this.offset=e}}n={tokenize:e=>{const o=[];let i=0,l=r;const a=[r,t];return e.replace(s,(e,...n)=>{var t=n.findIndex(e=>void 0!==e),n=n[t];let r;var s=d[t],s=(r=s?s(n):n,u[t]);if(!a.includes(s)&&!a.includes(l))throw new p(i);if((l=u[t])===c)throw new p(i);o.push([l,r,i]),i+=n.length}),o.filter(([e])=>e!==r)}};n.InvalidTokenError=p,e.punyexpr=n}(this);